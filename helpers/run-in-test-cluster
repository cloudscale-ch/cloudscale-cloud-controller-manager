#!/usr/bin/env bash
#
# Ensures that a Kubernetes test cluster is present and updated
#
set -euo pipefail

# Prepares k8test with an existing virtual env, or a newly created on
function ensure-k8test() {
  if ! test -d k8test; then
    git clone git@github.com:cloudscale-ch/k8test.git
    git -C k8test switch denis/init
  fi

  if [[ "${VIRTUAL_ENV:-}" == "" ]]; then

    if ! test -d k8test/venv; then
      python3 -m venv k8test/venv
    fi

    # shellcheck source=/dev/null
    source k8test/venv/bin/activate
  fi

  if ! command -v poetry > /dev/null; then
    pip install poetry
  fi

  if ! command -v ansible > /dev/null; then
    poetry install --directory k8test
  fi
}

# Prints a random zone
function random-zone() {
  arr[0]="rma1"
  arr[1]="lpg1"

  rand=$((RANDOM % 2))
  echo "${arr[$rand]}"
}

# Launches the test cluster, if there's no inventory yet
function ensure-inventory() {
  if ! test -d k8test/cluster; then
    mkdir k8test/cluster
  fi

  if ! test -f k8test/cluster/ssh.pub; then
    ssh-keygen -t ed25519 -N '' -f k8test/cluster/ssh
  fi
 
  if ! test -f k8test/cluster/inventory.yml; then
    k8test/playbooks/create-cluster.yml \
      -e zone="$(random-zone)" \
      -e ssh_key=k8test/cluster/ssh.pub \
      -e control_count=2 \
      -e worker_count=2 \
      -e kubelet_extra_args='--cloud-provider=external'

    # Those won't really change between runs, so update them during install
    k8test/playbooks/update-secrets.yml \
      -i k8test/cluster/inventory.yml
  fi
}

# Build the latest container each time
function build-container() {
  k8test/playbooks/build-container.yml \
    -i k8test/cluster/inventory.yml \
    -e dockerfile=./Dockerfile \
    -e tag=quay.io/cloudscalech/cloudscale-cloud-controller-manager:test \
    -e extra='--build-arg=VERSION=test'
}

# Re-apply the resources each time
function apply-resources() {
  sed 's/controller-manager:latest/controller-manager:test/g' \
    deploy/kubernetes/releases/latest.yml > /tmp/ccm.yml

  export KUBECONFIG=k8test/cluster/admin.conf
  kubectl delete -f /tmp/ccm.yml --ignore-not-found=true
  kubectl apply -f /tmp/ccm.yml
}

ensure-k8test
ensure-inventory
build-container
apply-resources
